version: "3.9"

# See https://www.youtube.com/watch?v=7N5O62FjGDc&list=WL&index=6
# docker network create traefik-public
# docker-compose up -d

services:


  #############################################################################
  # Reverse Proxy Traefik                                                     #
  #############################################################################

  traefik:
    # The official v2 Traefik docker image
    image: traefik:v2.11.0

    restart: unless-stopped

    ports:
      # Listen on port 80 (HTTP), necessary to redirect to HTTPS
      - "80:80"
      # Listen on port 443 (HTTPS)
      - "443:443"
      # # The Web UI (enabled by --api.insecure=true)
      # - "8080:8080"

    volumes:
      # Add Docker as a mounted volume, so that Traefik can listen to the Docker events, read the labels or other services
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # - /var/run/docker.sock:/var/run/docker.sock
      # Mount the volume to store the certificates
      - traefik-public-certificates:/certificates

    labels:
      # Enable Traefik for this service, to make it available in the public network
      - traefik.enable=true

      # Define the port inside of the Docker service to use
      - traefik.http.services.traefik-dashboard.loadbalancer.server.port=8080

      # Make Traefik use this domain in HTTP
      - traefik.http.routers.traefik-dashboard-http.entrypoints=http
      - traefik.http.routers.traefik-dashboard-http.rule=Host(`{{ traefik_dashboard_domain }}`)

      # Use the traefik-public network (declared below)
      - traefik.docker.network=traefik-public

      # traefik-https the actual router using HTTPS
      - traefik.http.routers.traefik-dashboard-https.entrypoints=https
      - traefik.http.routers.traefik-dashboard-https.rule=Host(`{{ traefik_dashboard_domain }}`)
      - traefik.http.routers.traefik-dashboard-https.tls=true
      # Use the "le" (Let's Encrypt) resolver created below
      - traefik.http.routers.traefik-dashboard-https.tls.certresolver=le
      # Use the special Traefik service api@internal with the web UI/Dashboard
      - traefik.http.routers.traefik-dashboard-https.service=api@internal

      # https-redirect middleware to redirect HTTP to HTTPS
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true

      # traefik-http set up only to use the middleware to redirect to https
      - traefik.http.routers.traefik-dashboard-http.middlewares=https-redirect
      # admin-auth middleware with HTTP Basic auth
      # format: "username:password_hash"
      # c.f. https://doc.traefik.io/traefik/middlewares/http/basicauth/
      # with password_hash generated with the following command: `openssl passwd -apr1 YOUR_PASSWORD`
      # and with the '$' escaped with '$$' in the generated hash (otherwise docker-compose will try to interpret it as a variable).
      # WARNING: here the hash password is hardcoded, this must be avoided for production apps!
      - "traefik.http.middlewares.admin-auth.basicauth.users={{ traefik_dashboard_login }}:{{ traefik_dashboard_password_hash }}"
      # Enable HTTP Basic auth, using the middleware created above
      - traefik.http.routers.traefik-dashboard-https.middlewares=admin-auth

    # Enables the web UI and tells Traefik to listen to docker
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Do not expose all Docker services (e.g. databases), only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Create an entrypoint "http" listening on port 80
      - --entrypoints.http.address=:80
      # Create an entrypoint "https" listening on port 443
      - --entrypoints.https.address=:443
      # Create the certificate resolver "le" for Let's Encrypt, uses the environment variable jd.jdhp@gmail.com
      - --certificatesresolvers.le.acme.email=jd.jdhp@gmail.com
      # Store the Let's Encrypt certificates in the mounted volume
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      # Use the TLS Challenge for Let's Encrypt
      - --certificatesresolvers.le.acme.tlschallenge=true
      # Enable the access log, with HTTP requests
      - --accesslog
      # - --log.level=debug
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
      #- --api.insecure=true

    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - traefik-public

volumes:
  # Create a volume to store the certificates, there is a constraint to make sure
  # Traefik is always deployed to the same Docker node withe the same volume containing
  # the HTTPS certificates
  traefik-public-certificates:

networks:
  # Use the previously created public network "traefik-public", shared with other
  # services that needs to be publicly available via this Traefik
  traefik-public:
    external: true
